/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export enum ActionTypeEnum {
    StatusChange = 'STATUS_CHANGE',
    MemoAdd = 'MEMO_ADD',
    MemoDelete = 'MEMO_DELETE',
    PaymentAdjustment = 'PAYMENT_ADJUSTMENT',
    RefundUpdate = 'REFUND_UPDATE'
}

/**
 * 
 * @export
 * @interface AddOrderMemo
 */
export interface AddOrderMemo {
    /**
     * 
     * @type {string}
     * @memberof AddOrderMemo
     */
    body: string;
}
/**
 * 
 * @export
 * @interface AddPaymentAdjustment
 */
export interface AddPaymentAdjustment {
    /**
     * 
     * @type {MethodEnum}
     * @memberof AddPaymentAdjustment
     */
    method: MethodEnum;
    /**
     * 
     * @type {string}
     * @memberof AddPaymentAdjustment
     */
    reason?: string;
    /**
     * 
     * @type {number}
     * @memberof AddPaymentAdjustment
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof AddPaymentAdjustment
     */
    bank_account_info?: string;
}
/**
 * 
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 
     * @type {number}
     * @memberof Admin
     */
    id: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof Admin
     */
    username: string;
    /**
     * 
     * @type {Profile}
     * @memberof Admin
     */
    profile: Profile;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    email?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum AlimtalkTypeEnum {
    DeliveryStarted = 'DELIVERY_STARTED',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffCategoriesFirst
 */
export interface AlloffCategoriesFirst {
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesFirst
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesFirst
     */
    imgurl?: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesFirst
     */
    keyname: string;
    /**
     * 
     * @type {number}
     * @memberof AlloffCategoriesFirst
     */
    level?: number;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesFirst
     */
    parentid?: string;
    /**
     * 
     * @type {TypeEnum}
     * @memberof AlloffCategoriesFirst
     */
    type?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesFirst
     */
    _id: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffCategoriesSecond
 */
export interface AlloffCategoriesSecond {
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesSecond
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesSecond
     */
    imgurl?: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesSecond
     */
    keyname: string;
    /**
     * 
     * @type {number}
     * @memberof AlloffCategoriesSecond
     */
    level?: number;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesSecond
     */
    parentid?: string;
    /**
     * 
     * @type {TypeEnum}
     * @memberof AlloffCategoriesSecond
     */
    type?: TypeEnum;
    /**
     * 
     * @type {string}
     * @memberof AlloffCategoriesSecond
     */
    _id: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductBrand
 */
export interface AlloffProductBrand {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    keyname: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    engname: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    korname: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    logoimgurl: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlloffProductBrand
     */
    onpopular: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlloffProductBrand
     */
    isopen: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    modulename: string;
    /**
     * 
     * @type {number}
     * @memberof AlloffProductBrand
     */
    maxdiscountrate: number;
    /**
     * 
     * @type {number}
     * @memberof AlloffProductBrand
     */
    numnewproducts: number;
    /**
     * 
     * @type {Array<EmbeddedBrandSizeguide>}
     * @memberof AlloffProductBrand
     */
    sizeguide?: Array<EmbeddedBrandSizeguide>;
    /**
     * 
     * @type {Array<EmbeddedBrandCategory>}
     * @memberof AlloffProductBrand
     */
    category?: Array<EmbeddedBrandCategory>;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductBrand
     */
    _id: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductFaults
 */
export interface AlloffProductFaults {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductFaults
     */
    image: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductFaults
     */
    description: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductInstruction
 */
export interface AlloffProductInstruction {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductInstruction
     */
    title: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlloffProductInstruction
     */
    description: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlloffProductInstruction
     */
    images?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductInstruction
     */
    thumbnail?: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductInventory
 */
export interface AlloffProductInventory {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductInventory
     */
    size: string;
    /**
     * 
     * @type {number}
     * @memberof AlloffProductInventory
     */
    quantity: number;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductTemplateBrand
 */
export interface AlloffProductTemplateBrand {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    keyname: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    engname: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    korname: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    logoimgurl: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlloffProductTemplateBrand
     */
    onpopular: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof AlloffProductTemplateBrand
     */
    isopen: boolean;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    modulename: string;
    /**
     * 
     * @type {number}
     * @memberof AlloffProductTemplateBrand
     */
    maxdiscountrate: number;
    /**
     * 
     * @type {number}
     * @memberof AlloffProductTemplateBrand
     */
    numnewproducts: number;
    /**
     * 
     * @type {Array<EmbeddedBrandSizeguide>}
     * @memberof AlloffProductTemplateBrand
     */
    sizeguide?: Array<EmbeddedBrandSizeguide>;
    /**
     * 
     * @type {Array<EmbeddedBrandCategory>}
     * @memberof AlloffProductTemplateBrand
     */
    category?: Array<EmbeddedBrandCategory>;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateBrand
     */
    _id: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductTemplateFaults
 */
export interface AlloffProductTemplateFaults {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateFaults
     */
    image: string;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateFaults
     */
    description: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface AlloffProductTemplateInstruction
 */
export interface AlloffProductTemplateInstruction {
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateInstruction
     */
    title: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlloffProductTemplateInstruction
     */
    description: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof AlloffProductTemplateInstruction
     */
    images?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof AlloffProductTemplateInstruction
     */
    thumbnail?: string;
}
/**
 * 
 * @export
 * @interface ChangeStatus
 */
export interface ChangeStatus {
    /**
     * 
     * @type {StatusEnum}
     * @memberof ChangeStatus
     */
    status: StatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatus
     */
    delivery_tracking_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatus
     */
    delivery_tracking_url?: string;
}
/**
 * 
 * @export
 * @interface DeleteOrderMemo
 */
export interface DeleteOrderMemo {
    /**
     * 
     * @type {number}
     * @memberof DeleteOrderMemo
     */
    memo_id: number;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedAlloffProductBrand
 */
export interface EmbeddedAlloffProductBrand {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    keyname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    engname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    korname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    logoimgurl: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedAlloffProductBrand
     */
    onpopular: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedAlloffProductBrand
     */
    isopen: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    modulename: string;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedAlloffProductBrand
     */
    maxdiscountrate: number;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedAlloffProductBrand
     */
    numnewproducts: number;
    /**
     * 
     * @type {Array<EmbeddedBrandSizeguide>}
     * @memberof EmbeddedAlloffProductBrand
     */
    sizeguide?: Array<EmbeddedBrandSizeguide>;
    /**
     * 
     * @type {Array<EmbeddedBrandCategory>}
     * @memberof EmbeddedAlloffProductBrand
     */
    category?: Array<EmbeddedBrandCategory>;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductBrand
     */
    _id: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedAlloffProductFaults
 */
export interface EmbeddedAlloffProductFaults {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductFaults
     */
    image: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductFaults
     */
    description: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedAlloffProductInstruction
 */
export interface EmbeddedAlloffProductInstruction {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductInstruction
     */
    title: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof EmbeddedAlloffProductInstruction
     */
    description: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof EmbeddedAlloffProductInstruction
     */
    images?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductInstruction
     */
    thumbnail?: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedAlloffProductInventory
 */
export interface EmbeddedAlloffProductInventory {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedAlloffProductInventory
     */
    size: string;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedAlloffProductInventory
     */
    quantity: number;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedBrandCategory
 */
export interface EmbeddedBrandCategory {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedBrandCategory
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedBrandCategory
     */
    keyname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedBrandCategory
     */
    catidentifier: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedBrandCategory
     */
    brandkeyname: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedBrandSizeguide
 */
export interface EmbeddedBrandSizeguide {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedBrandSizeguide
     */
    label: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedBrandSizeguide
     */
    imgurl: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedProductAlloffcategories
 */
export interface EmbeddedProductAlloffcategories {
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedProductAlloffcategories
     */
    touched: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedProductAlloffcategories
     */
    done: boolean;
    /**
     * 
     * @type {AlloffCategoriesFirst}
     * @memberof EmbeddedProductAlloffcategories
     */
    first?: AlloffCategoriesFirst;
    /**
     * 
     * @type {AlloffCategoriesSecond}
     * @memberof EmbeddedProductAlloffcategories
     */
    second?: AlloffCategoriesSecond;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedProductBrand
 */
export interface EmbeddedProductBrand {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    keyname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    engname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    korname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    logoimgurl: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedProductBrand
     */
    onpopular: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    description: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmbeddedProductBrand
     */
    isopen: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    modulename: string;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedProductBrand
     */
    maxdiscountrate: number;
    /**
     * 
     * @type {number}
     * @memberof EmbeddedProductBrand
     */
    numnewproducts: number;
    /**
     * 
     * @type {Array<EmbeddedBrandSizeguide>}
     * @memberof EmbeddedProductBrand
     */
    sizeguide?: Array<EmbeddedBrandSizeguide>;
    /**
     * 
     * @type {Array<EmbeddedBrandCategory>}
     * @memberof EmbeddedProductBrand
     */
    category?: Array<EmbeddedBrandCategory>;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductBrand
     */
    _id: string;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface EmbeddedProductCategory
 */
export interface EmbeddedProductCategory {
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductCategory
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductCategory
     */
    keyname: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductCategory
     */
    catidentifier: string;
    /**
     * 
     * @type {string}
     * @memberof EmbeddedProductCategory
     */
    brandkeyname: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum MethodEnum {
    CardCancel = 'CARD_CANCEL',
    Cash = 'CASH'
}

/**
 * 
 * @export
 * @interface OrderActionLog
 */
export interface OrderActionLog {
    /**
     * 
     * @type {number}
     * @memberof OrderActionLog
     */
    id: number;
    /**
     * 
     * @type {Admin}
     * @memberof OrderActionLog
     */
    admin: Admin;
    /**
     * 
     * @type {OrderAlimtalkLog}
     * @memberof OrderActionLog
     */
    alimtalk: OrderAlimtalkLog;
    /**
     * 
     * @type {OrderStatusChangeLog}
     * @memberof OrderActionLog
     */
    status_change: OrderStatusChangeLog;
    /**
     * 
     * @type {OrderRefundUpdateLog}
     * @memberof OrderActionLog
     */
    refund_update: OrderRefundUpdateLog;
    /**
     * 
     * @type {string}
     * @memberof OrderActionLog
     */
    order_id: string;
    /**
     * 
     * @type {string}
     * @memberof OrderActionLog
     */
    detail?: string | null;
    /**
     * 
     * @type {ActionTypeEnum}
     * @memberof OrderActionLog
     */
    action_type: ActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderActionLog
     */
    performed_at: string;
}
/**
 * 
 * @export
 * @interface OrderAlimtalkLog
 */
export interface OrderAlimtalkLog {
    /**
     * 
     * @type {number}
     * @memberof OrderAlimtalkLog
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OrderAlimtalkLog
     */
    order_id: string;
    /**
     * 
     * @type {AlimtalkTypeEnum}
     * @memberof OrderAlimtalkLog
     */
    alimtalk_type: AlimtalkTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderAlimtalkLog
     */
    request_id?: string | null;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface OrderItemAlloffproduct
 */
export interface OrderItemAlloffproduct {
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAlloffproduct
     */
    canceldescription: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAlloffproduct
     */
    deliverydescription: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAlloffproduct
     */
    description: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAlloffproduct
     */
    discountedprice: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAlloffproduct
     */
    discountrate: number;
    /**
     * 
     * @type {Array<EmbeddedAlloffProductFaults>}
     * @memberof OrderItemAlloffproduct
     */
    faults: Array<EmbeddedAlloffProductFaults>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAlloffproduct
     */
    images: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlloffproduct
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAlloffproduct
     */
    originalprice: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAlloffproduct
     */
    producttype: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemAlloffproduct
     */
    sizedescription: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlloffproduct
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlloffproduct
     */
    updated: string;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemAlloffproduct
     */
    removed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlloffproduct
     */
    productgroupid: string;
    /**
     * 
     * @type {Array<EmbeddedAlloffProductInventory>}
     * @memberof OrderItemAlloffproduct
     */
    inventory: Array<EmbeddedAlloffProductInventory>;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemAlloffproduct
     */
    soldout: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlloffproduct
     */
    templateId?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlloffproduct
     */
    _id: string;
    /**
     * 
     * @type {EmbeddedAlloffProductBrand}
     * @memberof OrderItemAlloffproduct
     */
    brand: EmbeddedAlloffProductBrand;
    /**
     * 
     * @type {EmbeddedAlloffProductInstruction}
     * @memberof OrderItemAlloffproduct
     */
    instruction: EmbeddedAlloffProductInstruction;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface OrderItemProduct
 */
export interface OrderItemProduct {
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    productid: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemProduct
     */
    images?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemProduct
     */
    removed?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemProduct
     */
    soldout?: boolean;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    producturl: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemProduct
     */
    discountrate: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    updated: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemProduct
     */
    discountedprice: number;
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemProduct
     */
    isupdated: boolean;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemProduct
     */
    canceldescription: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    originalprice: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemProduct
     */
    deliverydescription: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    isimagecached: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    isnewlycrawled: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    sizeavailable: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemProduct
     */
    _id: string;
    /**
     * 
     * @type {EmbeddedProductBrand}
     * @memberof OrderItemProduct
     */
    brand: EmbeddedProductBrand;
    /**
     * 
     * @type {EmbeddedProductCategory}
     * @memberof OrderItemProduct
     */
    category: EmbeddedProductCategory;
    /**
     * 
     * @type {EmbeddedProductAlloffcategories}
     * @memberof OrderItemProduct
     */
    alloffcategories: EmbeddedProductAlloffcategories;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface OrderList
 */
export interface OrderList {
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    id: string;
    /**
     * 
     * @type {Payment}
     * @memberof OrderList
     */
    payment: Payment;
    /**
     * 
     * @type {User}
     * @memberof OrderList
     */
    user: User;
    /**
     * 
     * @type {Refund}
     * @memberof OrderList
     */
    refund: Refund;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    orderedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    deliveryStartedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    deliveryFinishedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    cancelRequestedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    cancelFinishedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    confirmedAt: string;
    /**
     * 
     * @type {OrderstatusEnum}
     * @memberof OrderList
     */
    orderstatus: OrderstatusEnum;
    /**
     * 
     * @type {OrdertypeEnum}
     * @memberof OrderList
     */
    ordertype: OrdertypeEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderList
     */
    totalprice: number;
    /**
     * 
     * @type {number}
     * @memberof OrderList
     */
    productprice: number;
    /**
     * 
     * @type {number}
     * @memberof OrderList
     */
    deliveryprice: number;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    updated: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    memo: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    deliverytrackingnumber?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderList
     */
    deliverytrackingurl?: string;
    /**
     * 
     * @type {Array<OrderOrders>}
     * @memberof OrderList
     */
    orders: Array<OrderOrders>;
}
/**
 * 
 * @export
 * @interface OrderMemo
 */
export interface OrderMemo {
    /**
     * 
     * @type {number}
     * @memberof OrderMemo
     */
    id: number;
    /**
     * 
     * @type {Admin}
     * @memberof OrderMemo
     */
    admin: Admin;
    /**
     * 
     * @type {string}
     * @memberof OrderMemo
     */
    order_id: string;
    /**
     * 
     * @type {string}
     * @memberof OrderMemo
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof OrderMemo
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderMemo
     */
    deleted_at?: string | null;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface OrderOrders
 */
export interface OrderOrders {
    /**
     * 
     * @type {string}
     * @memberof OrderOrders
     */
    size: string;
    /**
     * 
     * @type {number}
     * @memberof OrderOrders
     */
    quantity: number;
    /**
     * 
     * @type {OrderItemAlloffproduct}
     * @memberof OrderOrders
     */
    alloffproduct?: OrderItemAlloffproduct;
    /**
     * 
     * @type {OrderItemProduct}
     * @memberof OrderOrders
     */
    product?: OrderItemProduct;
}
/**
 * 
 * @export
 * @interface OrderPaymentAdjustment
 */
export interface OrderPaymentAdjustment {
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    id: number;
    /**
     * 
     * @type {Admin}
     * @memberof OrderPaymentAdjustment
     */
    admin: Admin;
    /**
     * 
     * @type {MethodEnum}
     * @memberof OrderPaymentAdjustment
     */
    method: MethodEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    order_id: string;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    previous_balance: number;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    resulting_balance: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderPaymentAdjustment
     */
    pg_response?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    bank_account_info?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    reason: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    updated_at: string;
}
/**
 * 
 * @export
 * @interface OrderRefundUpdateLog
 */
export interface OrderRefundUpdateLog {
    /**
     * 
     * @type {number}
     * @memberof OrderRefundUpdateLog
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OrderRefundUpdateLog
     */
    order_id: string;
    /**
     * 
     * @type {number}
     * @memberof OrderRefundUpdateLog
     */
    refund_delivery_price: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefundUpdateLog
     */
    refund_price: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRefundUpdateLog
     */
    refund_amount: number;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface OrderRetrieve
 */
export interface OrderRetrieve {
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    id: string;
    /**
     * 
     * @type {Payment}
     * @memberof OrderRetrieve
     */
    payment: Payment;
    /**
     * 
     * @type {User}
     * @memberof OrderRetrieve
     */
    user: User;
    /**
     * 
     * @type {Refund}
     * @memberof OrderRetrieve
     */
    refund: Refund;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    orderedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    deliveryStartedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    deliveryFinishedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    cancelRequestedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    cancelFinishedAt: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    confirmedAt: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderRetrieve
     */
    iamport: { [key: string]: any; };
    /**
     * 
     * @type {Array<OrderPaymentAdjustment>}
     * @memberof OrderRetrieve
     */
    payment_adjustments: Array<OrderPaymentAdjustment>;
    /**
     * 
     * @type {Array<OrderMemo>}
     * @memberof OrderRetrieve
     */
    memos: Array<OrderMemo>;
    /**
     * 
     * @type {Array<OrderActionLog>}
     * @memberof OrderRetrieve
     */
    logs: Array<OrderActionLog>;
    /**
     * 
     * @type {OrderstatusEnum}
     * @memberof OrderRetrieve
     */
    orderstatus: OrderstatusEnum;
    /**
     * 
     * @type {OrdertypeEnum}
     * @memberof OrderRetrieve
     */
    ordertype: OrdertypeEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderRetrieve
     */
    totalprice: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRetrieve
     */
    productprice: number;
    /**
     * 
     * @type {number}
     * @memberof OrderRetrieve
     */
    deliveryprice: number;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    updated: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    memo: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    deliverytrackingnumber?: string;
    /**
     * 
     * @type {string}
     * @memberof OrderRetrieve
     */
    deliverytrackingurl?: string;
    /**
     * 
     * @type {Array<OrderOrders>}
     * @memberof OrderRetrieve
     */
    orders: Array<OrderOrders>;
}
/**
 * 
 * @export
 * @interface OrderStatusChangeLog
 */
export interface OrderStatusChangeLog {
    /**
     * 
     * @type {number}
     * @memberof OrderStatusChangeLog
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusChangeLog
     */
    order_id: string;
    /**
     * 
     * @type {StatusFromEnum}
     * @memberof OrderStatusChangeLog
     */
    status_from: StatusFromEnum;
    /**
     * 
     * @type {StatusToEnum}
     * @memberof OrderStatusChangeLog
     */
    status_to: StatusToEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusChangeLog
     */
    delivery_tracking_number_from?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusChangeLog
     */
    delivery_tracking_url_from?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusChangeLog
     */
    delivery_tracking_number_to?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderStatusChangeLog
     */
    delivery_tracking_url_to?: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum OrderstatusEnum {
    PaymentFinished = 'PAYMENT_FINISHED',
    ProductPreparing = 'PRODUCT_PREPARING',
    DeliveryPreparing = 'DELIVERY_PREPARING',
    DeliveryStarted = 'DELIVERY_STARTED',
    DeliveryFinished = 'DELIVERY_FINISHED',
    ConfirmPayment = 'CONFIRM_PAYMENT',
    CancelRequested = 'CANCEL_REQUESTED',
    CancelPending = 'CANCEL_PENDING',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum OrdertypeEnum {
    NormalOrder = 'NORMAL_ORDER',
    TimedealOrder = 'TIMEDEAL_ORDER'
}

/**
 * 
 * @export
 * @interface PaginatedOrderListList
 */
export interface PaginatedOrderListList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrderListList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOrderListList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOrderListList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<OrderList>}
     * @memberof PaginatedOrderListList
     */
    results?: Array<OrderList>;
}
/**
 * 
 * @export
 * @interface PaginatedTimedealList
 */
export interface PaginatedTimedealList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedTimedealList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTimedealList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTimedealList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<Timedeal>}
     * @memberof PaginatedTimedealList
     */
    results?: Array<Timedeal>;
}
/**
 * 
 * @export
 * @interface PaginatedTimedealProductList
 */
export interface PaginatedTimedealProductList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedTimedealProductList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTimedealProductList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTimedealProductList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<TimedealProduct>}
     * @memberof PaginatedTimedealProductList
     */
    results?: Array<TimedealProduct>;
}
/**
 * 
 * @export
 * @interface PaginatedTimedealProductTemplateList
 */
export interface PaginatedTimedealProductTemplateList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedTimedealProductTemplateList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTimedealProductTemplateList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedTimedealProductTemplateList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<TimedealProductTemplate>}
     * @memberof PaginatedTimedealProductTemplateList
     */
    results?: Array<TimedealProductTemplate>;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface PatchedTimedeal
 */
export interface PatchedTimedeal {
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    shorttitle?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedeal
     */
    numalarms?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedeal
     */
    instruction?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    imgurl?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedTimedeal
     */
    hidden?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    starttime?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedeal
     */
    finishtime?: string;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface PatchedTimedealProduct
 */
export interface PatchedTimedealProduct {
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProduct
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProduct
     */
    canceldescription?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProduct
     */
    deliverydescription?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProduct
     */
    description?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedealProduct
     */
    discountedprice?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedealProduct
     */
    discountrate?: number;
    /**
     * 
     * @type {Array<AlloffProductFaults>}
     * @memberof PatchedTimedealProduct
     */
    faults?: Array<AlloffProductFaults>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProduct
     */
    images?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProduct
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedealProduct
     */
    originalprice?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProduct
     */
    producttype?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProduct
     */
    sizedescription?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProduct
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProduct
     */
    updated?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedTimedealProduct
     */
    removed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProduct
     */
    productgroupid?: string;
    /**
     * 
     * @type {Array<AlloffProductInventory>}
     * @memberof PatchedTimedealProduct
     */
    inventory?: Array<AlloffProductInventory>;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedTimedealProduct
     */
    soldout?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProduct
     */
    templateId?: string;
    /**
     * 
     * @type {AlloffProductBrand}
     * @memberof PatchedTimedealProduct
     */
    brand?: AlloffProductBrand;
    /**
     * 
     * @type {AlloffProductInstruction}
     * @memberof PatchedTimedealProduct
     */
    instruction?: AlloffProductInstruction;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface PatchedTimedealProductTemplate
 */
export interface PatchedTimedealProductTemplate {
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProductTemplate
     */
    id?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProductTemplate
     */
    canceldescription?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProductTemplate
     */
    deliverydescription?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProductTemplate
     */
    description?: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedealProductTemplate
     */
    discountedprice?: number;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedealProductTemplate
     */
    discountrate?: number;
    /**
     * 
     * @type {Array<AlloffProductTemplateFaults>}
     * @memberof PatchedTimedealProductTemplate
     */
    faults?: Array<AlloffProductTemplateFaults>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProductTemplate
     */
    images?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProductTemplate
     */
    name?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedTimedealProductTemplate
     */
    originalprice?: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProductTemplate
     */
    producttype?: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedTimedealProductTemplate
     */
    sizedescription?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProductTemplate
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedTimedealProductTemplate
     */
    updated?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedTimedealProductTemplate
     */
    removed?: boolean;
    /**
     * 
     * @type {AlloffProductTemplateBrand}
     * @memberof PatchedTimedealProductTemplate
     */
    brand?: AlloffProductTemplateBrand;
    /**
     * 
     * @type {AlloffProductTemplateInstruction}
     * @memberof PatchedTimedealProductTemplate
     */
    instruction?: AlloffProductTemplateInstruction;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    impuid: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    paymentstatus: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    pg: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    paymethod: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    merchantuid: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyername: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyermobile: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyeraddress: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyerpostcode: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    updated: string;
}
/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    name: string;
}
/**
 * Serializer for Documents.  Recognized primitve fields:      * ``StringField``     * ``URLField``     * ``EmailField``     * ``IntField``     * ``LongField``     * ``FloatField``     * ``DecimalField``     * ``BooleanField``     * ``DateTimeField``     * ``ComplexDateTimeField``     * ``ObjectIdField``     * ``SequenceField`` (assumes it has integer counter)     * ``UUIDField``     * ``GeoPointField``     * ``GeoJsonBaseField`` (all those fields)     * ``DateField``  Compound fields: ``ListField`` and ``DictField`` are mapped to corresponding DRF fields, with respect to nested field specification.  The ``ReferenceField`` is handled like ``ForeignKey`` in DRF: there nested serializer autogenerated if serializer depth greater then 0, otherwise it\'s handled by it\'s own (results as ``str(id)``).  For ``EmbeddedDocumentField`` also nested serializer autogenerated for non-zero depth, otherwise it is skipped. TODO: THIS IS PROBABLY WRONG AND SHOULD BE FIXED.  Generic fields ``GenericReferenceField`` and ``GenericEmbeddedDocumentField`` are handled by their own with corresponding serializer fields.  Not well supported or untested:      ``FileField``     ``ImageField``     ``BinaryField``  All other fields are mapped to ``DocumentField`` and probably will work wrong.
 * @export
 * @interface Refund
 */
export interface Refund {
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    orderid?: string;
    /**
     * 
     * @type {number}
     * @memberof Refund
     */
    refunddeliveryprice: number;
    /**
     * 
     * @type {number}
     * @memberof Refund
     */
    refundprice: number;
    /**
     * 
     * @type {number}
     * @memberof Refund
     */
    refundamount: number;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof Refund
     */
    updated: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum StatusEnum {
    PaymentFinished = 'PAYMENT_FINISHED',
    ProductPreparing = 'PRODUCT_PREPARING',
    DeliveryPreparing = 'DELIVERY_PREPARING',
    DeliveryStarted = 'DELIVERY_STARTED',
    DeliveryFinished = 'DELIVERY_FINISHED',
    ConfirmPayment = 'CONFIRM_PAYMENT',
    CancelRequested = 'CANCEL_REQUESTED',
    CancelPending = 'CANCEL_PENDING',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum StatusFromEnum {
    PaymentFinished = 'PAYMENT_FINISHED',
    ProductPreparing = 'PRODUCT_PREPARING',
    DeliveryPreparing = 'DELIVERY_PREPARING',
    DeliveryStarted = 'DELIVERY_STARTED',
    DeliveryFinished = 'DELIVERY_FINISHED',
    ConfirmPayment = 'CONFIRM_PAYMENT',
    CancelRequested = 'CANCEL_REQUESTED',
    CancelPending = 'CANCEL_PENDING',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum StatusToEnum {
    PaymentFinished = 'PAYMENT_FINISHED',
    ProductPreparing = 'PRODUCT_PREPARING',
    DeliveryPreparing = 'DELIVERY_PREPARING',
    DeliveryStarted = 'DELIVERY_STARTED',
    DeliveryFinished = 'DELIVERY_FINISHED',
    ConfirmPayment = 'CONFIRM_PAYMENT',
    CancelRequested = 'CANCEL_REQUESTED',
    CancelPending = 'CANCEL_PENDING',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface Timedeal
 */
export interface Timedeal {
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    title?: string;
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    shorttitle?: string;
    /**
     * 
     * @type {number}
     * @memberof Timedeal
     */
    numalarms: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof Timedeal
     */
    instruction: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    imgurl: string;
    /**
     * 
     * @type {boolean}
     * @memberof Timedeal
     */
    hidden: boolean;
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    starttime: string;
    /**
     * 
     * @type {string}
     * @memberof Timedeal
     */
    finishtime: string;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface TimedealProduct
 */
export interface TimedealProduct {
    /**
     * 
     * @type {string}
     * @memberof TimedealProduct
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProduct
     */
    canceldescription: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProduct
     */
    deliverydescription: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProduct
     */
    description: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof TimedealProduct
     */
    discountedprice: number;
    /**
     * 
     * @type {number}
     * @memberof TimedealProduct
     */
    discountrate: number;
    /**
     * 
     * @type {Array<AlloffProductFaults>}
     * @memberof TimedealProduct
     */
    faults: Array<AlloffProductFaults>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProduct
     */
    images: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TimedealProduct
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof TimedealProduct
     */
    originalprice: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProduct
     */
    producttype: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProduct
     */
    sizedescription: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TimedealProduct
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof TimedealProduct
     */
    updated: string;
    /**
     * 
     * @type {boolean}
     * @memberof TimedealProduct
     */
    removed?: boolean;
    /**
     * 
     * @type {string}
     * @memberof TimedealProduct
     */
    productgroupid: string;
    /**
     * 
     * @type {Array<AlloffProductInventory>}
     * @memberof TimedealProduct
     */
    inventory: Array<AlloffProductInventory>;
    /**
     * 
     * @type {boolean}
     * @memberof TimedealProduct
     */
    soldout: boolean;
    /**
     * 
     * @type {string}
     * @memberof TimedealProduct
     */
    templateId?: string;
    /**
     * 
     * @type {AlloffProductBrand}
     * @memberof TimedealProduct
     */
    brand: AlloffProductBrand;
    /**
     * 
     * @type {AlloffProductInstruction}
     * @memberof TimedealProduct
     */
    instruction: AlloffProductInstruction;
}
/**
 * Serializer for DynamicDocuments.  Maps all undefined fields to :class:`fields.DynamicField`.
 * @export
 * @interface TimedealProductTemplate
 */
export interface TimedealProductTemplate {
    /**
     * 
     * @type {string}
     * @memberof TimedealProductTemplate
     */
    id: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProductTemplate
     */
    canceldescription: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProductTemplate
     */
    deliverydescription: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProductTemplate
     */
    description: Array<string>;
    /**
     * 
     * @type {number}
     * @memberof TimedealProductTemplate
     */
    discountedprice: number;
    /**
     * 
     * @type {number}
     * @memberof TimedealProductTemplate
     */
    discountrate: number;
    /**
     * 
     * @type {Array<AlloffProductTemplateFaults>}
     * @memberof TimedealProductTemplate
     */
    faults: Array<AlloffProductTemplateFaults>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProductTemplate
     */
    images: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TimedealProductTemplate
     */
    name: string;
    /**
     * 
     * @type {number}
     * @memberof TimedealProductTemplate
     */
    originalprice: number;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProductTemplate
     */
    producttype: Array<string>;
    /**
     * 
     * @type {Array<string>}
     * @memberof TimedealProductTemplate
     */
    sizedescription: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof TimedealProductTemplate
     */
    created: string;
    /**
     * 
     * @type {string}
     * @memberof TimedealProductTemplate
     */
    updated: string;
    /**
     * 
     * @type {boolean}
     * @memberof TimedealProductTemplate
     */
    removed?: boolean;
    /**
     * 
     * @type {AlloffProductTemplateBrand}
     * @memberof TimedealProductTemplate
     */
    brand: AlloffProductTemplateBrand;
    /**
     * 
     * @type {AlloffProductTemplateInstruction}
     * @memberof TimedealProductTemplate
     */
    instruction: AlloffProductTemplateInstruction;
}
/**
 * 
 * @export
 * @interface TokenObtainPairRequest
 */
export interface TokenObtainPairRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface TokenObtainPairResponse
 */
export interface TokenObtainPairResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairResponse
     */
    access: string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairResponse
     */
    refresh: string;
}
/**
 * 
 * @export
 * @interface TokenRefreshRequest
 */
export interface TokenRefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshRequest
     */
    access: string;
}
/**
 * 
 * @export
 * @interface TokenRefreshResponse
 */
export interface TokenRefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshResponse
     */
    access: string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshResponse
     */
    refresh: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum TypeEnum {
    Normal = 'NORMAL',
    NeedProcessing = 'NEED_PROCESSING',
    DoNotShow = 'DO_NOT_SHOW'
}

/**
 * 
 * @export
 * @interface UpdateRefund
 */
export interface UpdateRefund {
    /**
     * 
     * @type {number}
     * @memberof UpdateRefund
     */
    refund_amount: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateRefund
     */
    refund_delivery_price: number;
    /**
     * 
     * @type {number}
     * @memberof UpdateRefund
     */
    refund_price: number;
}
/**
 * Serializer for EmbeddedDocuments.  Skips id field and uniqueness validation. When saving, skips calling instance.save
 * @export
 * @interface User
 */
export interface User {
    /**
     * 
     * @type {string}
     * @memberof User
     */
    _id: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    uuid?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    email?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    created?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    mobile: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    baseaddress?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    detailaddress?: string;
    /**
     * 
     * @type {string}
     * @memberof User
     */
    postcode?: string;
}

/**
 * AdminUserApi - axios parameter creator
 * @export
 */
export const AdminUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adaptation of DRF GenericViewSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserMeRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin-user/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUserApi - functional programming interface
 * @export
 */
export const AdminUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUserApiAxiosParamCreator(configuration)
    return {
        /**
         * Adaptation of DRF GenericViewSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUserMeRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUserMeRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUserApi - factory interface
 * @export
 */
export const AdminUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUserApiFp(configuration)
    return {
        /**
         * Adaptation of DRF GenericViewSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserMeRetrieve(options?: any): AxiosPromise<Admin> {
            return localVarFp.adminUserMeRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminUserApi - object-oriented interface
 * @export
 * @class AdminUserApi
 * @extends {BaseAPI}
 */
export class AdminUserApi extends BaseAPI {
    /**
     * Adaptation of DRF GenericViewSet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApi
     */
    public adminUserMeRetrieve(options?: any) {
        return AdminUserApiFp(this.configuration).adminUserMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchemaRetrieve(format, lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.apiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {'json' | 'yaml'} [format] 
     * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(format, lang, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrdersApi - axios parameter creator
 * @export
 */
export const OrdersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddOrderMemo} addOrderMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAddMemoCreate: async (id: string, addOrderMemo: AddOrderMemo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersAddMemoCreate', 'id', id)
            // verify required parameter 'addOrderMemo' is not null or undefined
            assertParamExists('ordersAddMemoCreate', 'addOrderMemo', addOrderMemo)
            const localVarPath = `/orders/{id}/add_memo/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addOrderMemo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {AddPaymentAdjustment} addPaymentAdjustment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAddPaymentAdjustmentCreate: async (id: string, addPaymentAdjustment: AddPaymentAdjustment, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersAddPaymentAdjustmentCreate', 'id', id)
            // verify required parameter 'addPaymentAdjustment' is not null or undefined
            assertParamExists('ordersAddPaymentAdjustmentCreate', 'addPaymentAdjustment', addPaymentAdjustment)
            const localVarPath = `/orders/{id}/add_payment_adjustment/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(addPaymentAdjustment, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatus} changeStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersChangeStatusCreate: async (id: string, changeStatus: ChangeStatus, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersChangeStatusCreate', 'id', id)
            // verify required parameter 'changeStatus' is not null or undefined
            assertParamExists('ordersChangeStatusCreate', 'changeStatus', changeStatus)
            const localVarPath = `/orders/{id}/change_status/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStatus, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteOrderMemo} deleteOrderMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersDeleteMemoCreate: async (id: string, deleteOrderMemo: DeleteOrderMemo, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersDeleteMemoCreate', 'id', id)
            // verify required parameter 'deleteOrderMemo' is not null or undefined
            assertParamExists('ordersDeleteMemoCreate', 'deleteOrderMemo', deleteOrderMemo)
            const localVarPath = `/orders/{id}/delete_memo/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(deleteOrderMemo, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersList: async (page?: number, search?: string, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/orders/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersRetrieve', 'id', id)
            const localVarPath = `/orders/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRefund} updateRefund 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersUpdateRefundCreate: async (id: string, updateRefund: UpdateRefund, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('ordersUpdateRefundCreate', 'id', id)
            // verify required parameter 'updateRefund' is not null or undefined
            assertParamExists('ordersUpdateRefundCreate', 'updateRefund', updateRefund)
            const localVarPath = `/orders/{id}/update_refund/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(updateRefund, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrdersApi - functional programming interface
 * @export
 */
export const OrdersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrdersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddOrderMemo} addOrderMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAddMemoCreate(id: string, addOrderMemo: AddOrderMemo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddOrderMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAddMemoCreate(id, addOrderMemo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {AddPaymentAdjustment} addPaymentAdjustment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersAddPaymentAdjustmentCreate(id: string, addPaymentAdjustment: AddPaymentAdjustment, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AddPaymentAdjustment>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersAddPaymentAdjustmentCreate(id, addPaymentAdjustment, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatus} changeStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersChangeStatusCreate(id: string, changeStatus: ChangeStatus, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersChangeStatusCreate(id, changeStatus, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteOrderMemo} deleteOrderMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersDeleteMemoCreate(id: string, deleteOrderMemo: DeleteOrderMemo, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<DeleteOrderMemo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersDeleteMemoCreate(id, deleteOrderMemo, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersList(page?: number, search?: string, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOrderListList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersList(page, search, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderRetrieve>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRefund} updateRefund 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ordersUpdateRefundCreate(id: string, updateRefund: UpdateRefund, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<UpdateRefund>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ordersUpdateRefundCreate(id, updateRefund, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrdersApi - factory interface
 * @export
 */
export const OrdersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrdersApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {AddOrderMemo} addOrderMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAddMemoCreate(id: string, addOrderMemo: AddOrderMemo, options?: any): AxiosPromise<AddOrderMemo> {
            return localVarFp.ordersAddMemoCreate(id, addOrderMemo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {AddPaymentAdjustment} addPaymentAdjustment 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersAddPaymentAdjustmentCreate(id: string, addPaymentAdjustment: AddPaymentAdjustment, options?: any): AxiosPromise<AddPaymentAdjustment> {
            return localVarFp.ordersAddPaymentAdjustmentCreate(id, addPaymentAdjustment, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatus} changeStatus 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersChangeStatusCreate(id: string, changeStatus: ChangeStatus, options?: any): AxiosPromise<ChangeStatus> {
            return localVarFp.ordersChangeStatusCreate(id, changeStatus, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {DeleteOrderMemo} deleteOrderMemo 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersDeleteMemoCreate(id: string, deleteOrderMemo: DeleteOrderMemo, options?: any): AxiosPromise<DeleteOrderMemo> {
            return localVarFp.ordersDeleteMemoCreate(id, deleteOrderMemo, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersList(page?: number, search?: string, size?: number, options?: any): AxiosPromise<PaginatedOrderListList> {
            return localVarFp.ordersList(page, search, size, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersRetrieve(id: string, options?: any): AxiosPromise<OrderRetrieve> {
            return localVarFp.ordersRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {UpdateRefund} updateRefund 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ordersUpdateRefundCreate(id: string, updateRefund: UpdateRefund, options?: any): AxiosPromise<UpdateRefund> {
            return localVarFp.ordersUpdateRefundCreate(id, updateRefund, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * OrdersApi - object-oriented interface
 * @export
 * @class OrdersApi
 * @extends {BaseAPI}
 */
export class OrdersApi extends BaseAPI {
    /**
     * 
     * @param {string} id 
     * @param {AddOrderMemo} addOrderMemo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersAddMemoCreate(id: string, addOrderMemo: AddOrderMemo, options?: any) {
        return OrdersApiFp(this.configuration).ordersAddMemoCreate(id, addOrderMemo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {AddPaymentAdjustment} addPaymentAdjustment 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersAddPaymentAdjustmentCreate(id: string, addPaymentAdjustment: AddPaymentAdjustment, options?: any) {
        return OrdersApiFp(this.configuration).ordersAddPaymentAdjustmentCreate(id, addPaymentAdjustment, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {ChangeStatus} changeStatus 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersChangeStatusCreate(id: string, changeStatus: ChangeStatus, options?: any) {
        return OrdersApiFp(this.configuration).ordersChangeStatusCreate(id, changeStatus, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {DeleteOrderMemo} deleteOrderMemo 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersDeleteMemoCreate(id: string, deleteOrderMemo: DeleteOrderMemo, options?: any) {
        return OrdersApiFp(this.configuration).ordersDeleteMemoCreate(id, deleteOrderMemo, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersList(page?: number, search?: string, size?: number, options?: any) {
        return OrdersApiFp(this.configuration).ordersList(page, search, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersRetrieve(id: string, options?: any) {
        return OrdersApiFp(this.configuration).ordersRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {string} id 
     * @param {UpdateRefund} updateRefund 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrdersApi
     */
    public ordersUpdateRefundCreate(id: string, updateRefund: UpdateRefund, options?: any) {
        return OrdersApiFp(this.configuration).ordersUpdateRefundCreate(id, updateRefund, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimedealProductTemplatesApi - axios parameter creator
 * @export
 */
export const TimedealProductTemplatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {TimedealProductTemplate} timedealProductTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesCreate: async (timedealProductTemplate: TimedealProductTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timedealProductTemplate' is not null or undefined
            assertParamExists('timedealProductTemplatesCreate', 'timedealProductTemplate', timedealProductTemplate)
            const localVarPath = `/timedeal-product-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timedealProductTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesDestroy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductTemplatesDestroy', 'id', id)
            const localVarPath = `/timedeal-product-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesList: async (page?: number, search?: string, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/timedeal-product-templates/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedealProductTemplate} [patchedTimedealProductTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesPartialUpdate: async (id: string, patchedTimedealProductTemplate?: PatchedTimedealProductTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductTemplatesPartialUpdate', 'id', id)
            const localVarPath = `/timedeal-product-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedTimedealProductTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductTemplatesRetrieve', 'id', id)
            const localVarPath = `/timedeal-product-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {TimedealProductTemplate} timedealProductTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesUpdate: async (id: string, timedealProductTemplate: TimedealProductTemplate, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductTemplatesUpdate', 'id', id)
            // verify required parameter 'timedealProductTemplate' is not null or undefined
            assertParamExists('timedealProductTemplatesUpdate', 'timedealProductTemplate', timedealProductTemplate)
            const localVarPath = `/timedeal-product-templates/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timedealProductTemplate, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimedealProductTemplatesApi - functional programming interface
 * @export
 */
export const TimedealProductTemplatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimedealProductTemplatesApiAxiosParamCreator(configuration)
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {TimedealProductTemplate} timedealProductTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductTemplatesCreate(timedealProductTemplate: TimedealProductTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProductTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductTemplatesCreate(timedealProductTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductTemplatesDestroy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductTemplatesDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductTemplatesList(page?: number, search?: string, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTimedealProductTemplateList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductTemplatesList(page, search, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedealProductTemplate} [patchedTimedealProductTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductTemplatesPartialUpdate(id: string, patchedTimedealProductTemplate?: PatchedTimedealProductTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProductTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductTemplatesPartialUpdate(id, patchedTimedealProductTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductTemplatesRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProductTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductTemplatesRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {TimedealProductTemplate} timedealProductTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductTemplatesUpdate(id: string, timedealProductTemplate: TimedealProductTemplate, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProductTemplate>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductTemplatesUpdate(id, timedealProductTemplate, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimedealProductTemplatesApi - factory interface
 * @export
 */
export const TimedealProductTemplatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimedealProductTemplatesApiFp(configuration)
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {TimedealProductTemplate} timedealProductTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesCreate(timedealProductTemplate: TimedealProductTemplate, options?: any): AxiosPromise<TimedealProductTemplate> {
            return localVarFp.timedealProductTemplatesCreate(timedealProductTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.timedealProductTemplatesDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesList(page?: number, search?: string, size?: number, options?: any): AxiosPromise<PaginatedTimedealProductTemplateList> {
            return localVarFp.timedealProductTemplatesList(page, search, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedealProductTemplate} [patchedTimedealProductTemplate] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesPartialUpdate(id: string, patchedTimedealProductTemplate?: PatchedTimedealProductTemplate, options?: any): AxiosPromise<TimedealProductTemplate> {
            return localVarFp.timedealProductTemplatesPartialUpdate(id, patchedTimedealProductTemplate, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesRetrieve(id: string, options?: any): AxiosPromise<TimedealProductTemplate> {
            return localVarFp.timedealProductTemplatesRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {TimedealProductTemplate} timedealProductTemplate 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductTemplatesUpdate(id: string, timedealProductTemplate: TimedealProductTemplate, options?: any): AxiosPromise<TimedealProductTemplate> {
            return localVarFp.timedealProductTemplatesUpdate(id, timedealProductTemplate, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimedealProductTemplatesApi - object-oriented interface
 * @export
 * @class TimedealProductTemplatesApi
 * @extends {BaseAPI}
 */
export class TimedealProductTemplatesApi extends BaseAPI {
    /**
     * Adaptation of DRF ModelViewSet
     * @param {TimedealProductTemplate} timedealProductTemplate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductTemplatesApi
     */
    public timedealProductTemplatesCreate(timedealProductTemplate: TimedealProductTemplate, options?: any) {
        return TimedealProductTemplatesApiFp(this.configuration).timedealProductTemplatesCreate(timedealProductTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductTemplatesApi
     */
    public timedealProductTemplatesDestroy(id: string, options?: any) {
        return TimedealProductTemplatesApiFp(this.configuration).timedealProductTemplatesDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductTemplatesApi
     */
    public timedealProductTemplatesList(page?: number, search?: string, size?: number, options?: any) {
        return TimedealProductTemplatesApiFp(this.configuration).timedealProductTemplatesList(page, search, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {PatchedTimedealProductTemplate} [patchedTimedealProductTemplate] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductTemplatesApi
     */
    public timedealProductTemplatesPartialUpdate(id: string, patchedTimedealProductTemplate?: PatchedTimedealProductTemplate, options?: any) {
        return TimedealProductTemplatesApiFp(this.configuration).timedealProductTemplatesPartialUpdate(id, patchedTimedealProductTemplate, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductTemplatesApi
     */
    public timedealProductTemplatesRetrieve(id: string, options?: any) {
        return TimedealProductTemplatesApiFp(this.configuration).timedealProductTemplatesRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {TimedealProductTemplate} timedealProductTemplate 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductTemplatesApi
     */
    public timedealProductTemplatesUpdate(id: string, timedealProductTemplate: TimedealProductTemplate, options?: any) {
        return TimedealProductTemplatesApiFp(this.configuration).timedealProductTemplatesUpdate(id, timedealProductTemplate, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimedealProductsApi - axios parameter creator
 * @export
 */
export const TimedealProductsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {TimedealProduct} timedealProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsCreate: async (timedealProduct: TimedealProduct, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timedealProduct' is not null or undefined
            assertParamExists('timedealProductsCreate', 'timedealProduct', timedealProduct)
            const localVarPath = `/timedeal-products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timedealProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsDestroy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductsDestroy', 'id', id)
            const localVarPath = `/timedeal-products/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsList: async (page?: number, search?: string, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/timedeal-products/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedealProduct} [patchedTimedealProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsPartialUpdate: async (id: string, patchedTimedealProduct?: PatchedTimedealProduct, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductsPartialUpdate', 'id', id)
            const localVarPath = `/timedeal-products/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedTimedealProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductsRetrieve', 'id', id)
            const localVarPath = `/timedeal-products/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {TimedealProduct} timedealProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsUpdate: async (id: string, timedealProduct: TimedealProduct, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealProductsUpdate', 'id', id)
            // verify required parameter 'timedealProduct' is not null or undefined
            assertParamExists('timedealProductsUpdate', 'timedealProduct', timedealProduct)
            const localVarPath = `/timedeal-products/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timedealProduct, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimedealProductsApi - functional programming interface
 * @export
 */
export const TimedealProductsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimedealProductsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {TimedealProduct} timedealProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductsCreate(timedealProduct: TimedealProduct, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductsCreate(timedealProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductsDestroy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductsList(page?: number, search?: string, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTimedealProductList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductsList(page, search, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedealProduct} [patchedTimedealProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductsPartialUpdate(id: string, patchedTimedealProduct?: PatchedTimedealProduct, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductsPartialUpdate(id, patchedTimedealProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductsRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {TimedealProduct} timedealProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealProductsUpdate(id: string, timedealProduct: TimedealProduct, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TimedealProduct>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealProductsUpdate(id, timedealProduct, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimedealProductsApi - factory interface
 * @export
 */
export const TimedealProductsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimedealProductsApiFp(configuration)
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {TimedealProduct} timedealProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsCreate(timedealProduct: TimedealProduct, options?: any): AxiosPromise<TimedealProduct> {
            return localVarFp.timedealProductsCreate(timedealProduct, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.timedealProductsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsList(page?: number, search?: string, size?: number, options?: any): AxiosPromise<PaginatedTimedealProductList> {
            return localVarFp.timedealProductsList(page, search, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedealProduct} [patchedTimedealProduct] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsPartialUpdate(id: string, patchedTimedealProduct?: PatchedTimedealProduct, options?: any): AxiosPromise<TimedealProduct> {
            return localVarFp.timedealProductsPartialUpdate(id, patchedTimedealProduct, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsRetrieve(id: string, options?: any): AxiosPromise<TimedealProduct> {
            return localVarFp.timedealProductsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {TimedealProduct} timedealProduct 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealProductsUpdate(id: string, timedealProduct: TimedealProduct, options?: any): AxiosPromise<TimedealProduct> {
            return localVarFp.timedealProductsUpdate(id, timedealProduct, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimedealProductsApi - object-oriented interface
 * @export
 * @class TimedealProductsApi
 * @extends {BaseAPI}
 */
export class TimedealProductsApi extends BaseAPI {
    /**
     * Adaptation of DRF ModelViewSet
     * @param {TimedealProduct} timedealProduct 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductsApi
     */
    public timedealProductsCreate(timedealProduct: TimedealProduct, options?: any) {
        return TimedealProductsApiFp(this.configuration).timedealProductsCreate(timedealProduct, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductsApi
     */
    public timedealProductsDestroy(id: string, options?: any) {
        return TimedealProductsApiFp(this.configuration).timedealProductsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductsApi
     */
    public timedealProductsList(page?: number, search?: string, size?: number, options?: any) {
        return TimedealProductsApiFp(this.configuration).timedealProductsList(page, search, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {PatchedTimedealProduct} [patchedTimedealProduct] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductsApi
     */
    public timedealProductsPartialUpdate(id: string, patchedTimedealProduct?: PatchedTimedealProduct, options?: any) {
        return TimedealProductsApiFp(this.configuration).timedealProductsPartialUpdate(id, patchedTimedealProduct, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductsApi
     */
    public timedealProductsRetrieve(id: string, options?: any) {
        return TimedealProductsApiFp(this.configuration).timedealProductsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {TimedealProduct} timedealProduct 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealProductsApi
     */
    public timedealProductsUpdate(id: string, timedealProduct: TimedealProduct, options?: any) {
        return TimedealProductsApiFp(this.configuration).timedealProductsUpdate(id, timedealProduct, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TimedealsApi - axios parameter creator
 * @export
 */
export const TimedealsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {Timedeal} timedeal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsCreate: async (timedeal: Timedeal, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'timedeal' is not null or undefined
            assertParamExists('timedealsCreate', 'timedeal', timedeal)
            const localVarPath = `/timedeals/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timedeal, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsDestroy: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealsDestroy', 'id', id)
            const localVarPath = `/timedeals/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsList: async (page?: number, search?: string, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/timedeals/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedeal} [patchedTimedeal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsPartialUpdate: async (id: string, patchedTimedeal?: PatchedTimedeal, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealsPartialUpdate', 'id', id)
            const localVarPath = `/timedeals/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PATCH', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(patchedTimedeal, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealsRetrieve', 'id', id)
            const localVarPath = `/timedeals/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {Timedeal} timedeal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsUpdate: async (id: string, timedeal: Timedeal, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('timedealsUpdate', 'id', id)
            // verify required parameter 'timedeal' is not null or undefined
            assertParamExists('timedealsUpdate', 'timedeal', timedeal)
            const localVarPath = `/timedeals/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(timedeal, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TimedealsApi - functional programming interface
 * @export
 */
export const TimedealsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TimedealsApiAxiosParamCreator(configuration)
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {Timedeal} timedeal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealsCreate(timedeal: Timedeal, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Timedeal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealsCreate(timedeal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealsDestroy(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealsDestroy(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealsList(page?: number, search?: string, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedTimedealList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealsList(page, search, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedeal} [patchedTimedeal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealsPartialUpdate(id: string, patchedTimedeal?: PatchedTimedeal, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Timedeal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealsPartialUpdate(id, patchedTimedeal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealsRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Timedeal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {Timedeal} timedeal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async timedealsUpdate(id: string, timedeal: Timedeal, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Timedeal>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.timedealsUpdate(id, timedeal, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TimedealsApi - factory interface
 * @export
 */
export const TimedealsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TimedealsApiFp(configuration)
    return {
        /**
         * Adaptation of DRF ModelViewSet
         * @param {Timedeal} timedeal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsCreate(timedeal: Timedeal, options?: any): AxiosPromise<Timedeal> {
            return localVarFp.timedealsCreate(timedeal, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsDestroy(id: string, options?: any): AxiosPromise<void> {
            return localVarFp.timedealsDestroy(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {number} [page] A page number within the paginated result set.
         * @param {string} [search] A search term.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsList(page?: number, search?: string, size?: number, options?: any): AxiosPromise<PaginatedTimedealList> {
            return localVarFp.timedealsList(page, search, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {PatchedTimedeal} [patchedTimedeal] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsPartialUpdate(id: string, patchedTimedeal?: PatchedTimedeal, options?: any): AxiosPromise<Timedeal> {
            return localVarFp.timedealsPartialUpdate(id, patchedTimedeal, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsRetrieve(id: string, options?: any): AxiosPromise<Timedeal> {
            return localVarFp.timedealsRetrieve(id, options).then((request) => request(axios, basePath));
        },
        /**
         * Adaptation of DRF ModelViewSet
         * @param {string} id 
         * @param {Timedeal} timedeal 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        timedealsUpdate(id: string, timedeal: Timedeal, options?: any): AxiosPromise<Timedeal> {
            return localVarFp.timedealsUpdate(id, timedeal, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TimedealsApi - object-oriented interface
 * @export
 * @class TimedealsApi
 * @extends {BaseAPI}
 */
export class TimedealsApi extends BaseAPI {
    /**
     * Adaptation of DRF ModelViewSet
     * @param {Timedeal} timedeal 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealsApi
     */
    public timedealsCreate(timedeal: Timedeal, options?: any) {
        return TimedealsApiFp(this.configuration).timedealsCreate(timedeal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealsApi
     */
    public timedealsDestroy(id: string, options?: any) {
        return TimedealsApiFp(this.configuration).timedealsDestroy(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {number} [page] A page number within the paginated result set.
     * @param {string} [search] A search term.
     * @param {number} [size] Number of results to return per page.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealsApi
     */
    public timedealsList(page?: number, search?: string, size?: number, options?: any) {
        return TimedealsApiFp(this.configuration).timedealsList(page, search, size, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {PatchedTimedeal} [patchedTimedeal] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealsApi
     */
    public timedealsPartialUpdate(id: string, patchedTimedeal?: PatchedTimedeal, options?: any) {
        return TimedealsApiFp(this.configuration).timedealsPartialUpdate(id, patchedTimedeal, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealsApi
     */
    public timedealsRetrieve(id: string, options?: any) {
        return TimedealsApiFp(this.configuration).timedealsRetrieve(id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Adaptation of DRF ModelViewSet
     * @param {string} id 
     * @param {Timedeal} timedeal 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TimedealsApi
     */
    public timedealsUpdate(id: string, timedeal: Timedeal, options?: any) {
        return TimedealsApiFp(this.configuration).timedealsUpdate(id, timedeal, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequest} tokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenCreate: async (tokenObtainPairRequest: TokenObtainPairRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenObtainPairRequest' is not null or undefined
            assertParamExists('tokenCreate', 'tokenObtainPairRequest', tokenObtainPairRequest)
            const localVarPath = `/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenObtainPairRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenRefreshCreate: async (tokenRefreshRequest: TokenRefreshRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshRequest' is not null or undefined
            assertParamExists('tokenRefreshCreate', 'tokenRefreshRequest', tokenRefreshRequest)
            const localVarPath = `/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequest} tokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenCreate(tokenObtainPairRequest: TokenObtainPairRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenCreate(tokenObtainPairRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenRefreshCreate(tokenRefreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequest} tokenObtainPairRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenCreate(tokenObtainPairRequest: TokenObtainPairRequest, options?: any): AxiosPromise<TokenObtainPairResponse> {
            return localVarFp.tokenCreate(tokenObtainPairRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequest} tokenRefreshRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: any): AxiosPromise<TokenRefreshResponse> {
            return localVarFp.tokenRefreshCreate(tokenRefreshRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenObtainPairRequest} tokenObtainPairRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public tokenCreate(tokenObtainPairRequest: TokenObtainPairRequest, options?: any) {
        return TokenApiFp(this.configuration).tokenCreate(tokenObtainPairRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenRefreshRequest} tokenRefreshRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public tokenRefreshCreate(tokenRefreshRequest: TokenRefreshRequest, options?: any) {
        return TokenApiFp(this.configuration).tokenRefreshCreate(tokenRefreshRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


