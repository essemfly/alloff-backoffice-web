/* tslint:disable */
/* eslint-disable */
/**
 * 
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @enum {string}
 */

export enum ActionTypeEnum {
    StatusChange = 'STATUS_CHANGE',
    MemoAdd = 'MEMO_ADD',
    MemoDelete = 'MEMO_DELETE',
    PaymentAdjustment = 'PAYMENT_ADJUSTMENT',
    RefundUpdate = 'REFUND_UPDATE'
}

/**
 * 
 * @export
 * @interface Admin
 */
export interface Admin {
    /**
     * 
     * @type {number}
     * @memberof Admin
     */
    id: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof Admin
     */
    username: string;
    /**
     * 
     * @type {Profile}
     * @memberof Admin
     */
    profile: Profile;
    /**
     * 
     * @type {string}
     * @memberof Admin
     */
    email?: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum AlimtalkTypeEnum {
    DeliveryStarted = 'DELIVERY_STARTED',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * 
 * @export
 * @interface ChangeStatus
 */
export interface ChangeStatus {
    /**
     * 
     * @type {OrderItemStatusEnum}
     * @memberof ChangeStatus
     */
    status: OrderItemStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatus
     */
    delivery_tracking_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatus
     */
    delivery_tracking_url?: string;
}
/**
 * 
 * @export
 * @interface ChangeStatusRequest
 */
export interface ChangeStatusRequest {
    /**
     * 
     * @type {OrderItemStatusEnum}
     * @memberof ChangeStatusRequest
     */
    status: OrderItemStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatusRequest
     */
    delivery_tracking_number?: string;
    /**
     * 
     * @type {string}
     * @memberof ChangeStatusRequest
     */
    delivery_tracking_url?: string;
}
/**
 * 
 * @export
 * @interface Inventory
 */
export interface Inventory {
    /**
     * 
     * @type {number}
     * @memberof Inventory
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    code: string;
    /**
     * 
     * @type {InventoryStatusEnum}
     * @memberof Inventory
     */
    status: InventoryStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    product_id: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    product_name: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    product_brand_id: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    product_brand_name: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    product_size: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    product_color: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    location: string | null;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    memo: string | null;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof Inventory
     */
    deleted_at: string | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum InventoryStatusEnum {
    Created = 'CREATED',
    InStock = 'IN_STOCK',
    ProcessingNeeded = 'PROCESSING_NEEDED',
    Shipped = 'SHIPPED',
    ShippingPending = 'SHIPPING_PENDING'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum MethodEnum {
    CardCancel = 'CARD_CANCEL',
    Cash = 'CASH'
}

/**
 * 
 * @export
 * @interface Order
 */
export interface Order {
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    id: number;
    /**
     * 
     * @type {Payment}
     * @memberof Order
     */
    payment: Payment;
    /**
     * 
     * @type {Array<OrderPaymentAdjustment>}
     * @memberof Order
     */
    payment_adjustments: Array<OrderPaymentAdjustment>;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    alloff_order_id: string;
    /**
     * 
     * @type {OrderStatusEnum}
     * @memberof Order
     */
    order_status: OrderStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    user_id: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof Order
     */
    user: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    user_memo?: string;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    product_price: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    delivery_price?: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    total_price: number;
    /**
     * 
     * @type {number}
     * @memberof Order
     */
    refund_price?: number;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof Order
     */
    ordered_at?: string | null;
}
/**
 * 
 * @export
 * @interface OrderItemActionLog
 */
export interface OrderItemActionLog {
    /**
     * 
     * @type {number}
     * @memberof OrderItemActionLog
     */
    id: number;
    /**
     * 
     * @type {Admin}
     * @memberof OrderItemActionLog
     */
    admin: Admin;
    /**
     * 
     * @type {OrderItemAlimtalkLog}
     * @memberof OrderItemActionLog
     */
    alimtalk: OrderItemAlimtalkLog;
    /**
     * 
     * @type {OrderItemStatusChangeLog}
     * @memberof OrderItemActionLog
     */
    status_change: OrderItemStatusChangeLog;
    /**
     * 
     * @type {OrderItemRefundUpdateLog}
     * @memberof OrderItemActionLog
     */
    refund_update: OrderItemRefundUpdateLog;
    /**
     * 
     * @type {string}
     * @memberof OrderItemActionLog
     */
    detail?: string | null;
    /**
     * 
     * @type {ActionTypeEnum}
     * @memberof OrderItemActionLog
     */
    action_type: ActionTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderItemActionLog
     */
    performed_at: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemActionLog
     */
    order_item: number;
}
/**
 * 
 * @export
 * @interface OrderItemAlimtalkLog
 */
export interface OrderItemAlimtalkLog {
    /**
     * 
     * @type {number}
     * @memberof OrderItemAlimtalkLog
     */
    id: number;
    /**
     * 
     * @type {AlimtalkTypeEnum}
     * @memberof OrderItemAlimtalkLog
     */
    alimtalk_type: AlimtalkTypeEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderItemAlimtalkLog
     */
    request_id?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemAlimtalkLog
     */
    order_item: number;
}
/**
 * 
 * @export
 * @interface OrderItemList
 */
export interface OrderItemList {
    /**
     * 
     * @type {number}
     * @memberof OrderItemList
     */
    id: number;
    /**
     * 
     * @type {Order}
     * @memberof OrderItemList
     */
    order: Order;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    product_option: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemList
     */
    total_amount: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    order_item_code: string;
    /**
     * 
     * @type {OrderItemTypeEnum}
     * @memberof OrderItemList
     */
    order_item_type: OrderItemTypeEnum;
    /**
     * 
     * @type {OrderItemStatusEnum}
     * @memberof OrderItemList
     */
    order_item_status: OrderItemStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    brand_keyname: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    brand_korname: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    product_id: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    product_url: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    product_img: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    product_name: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderItemList
     */
    cancel_description: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderItemList
     */
    delivery_description: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemList
     */
    is_removed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrderItemList
     */
    sales_price: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    size: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    color?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemList
     */
    quantity: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    tracking_url?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    tracking_number?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    ordered_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    payment_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    product_preparing_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    foreign_product_inspecting_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    delivery_preparing_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    foreign_delivery_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    delivery_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    delivery_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    confirmed_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    cancel_requested_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    cancel_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    exchange_requested_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    exchange_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    exchange_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    return_requested_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    return_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemList
     */
    return_finished_at?: string | null;
}
/**
 * 
 * @export
 * @interface OrderItemMemo
 */
export interface OrderItemMemo {
    /**
     * 
     * @type {number}
     * @memberof OrderItemMemo
     */
    id: number;
    /**
     * 
     * @type {Admin}
     * @memberof OrderItemMemo
     */
    admin: Admin;
    /**
     * 
     * @type {string}
     * @memberof OrderItemMemo
     */
    body: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemMemo
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemMemo
     */
    deleted_at?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemMemo
     */
    order_item: number;
}
/**
 * 
 * @export
 * @interface OrderItemRefundUpdateLog
 */
export interface OrderItemRefundUpdateLog {
    /**
     * 
     * @type {number}
     * @memberof OrderItemRefundUpdateLog
     */
    id: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemRefundUpdateLog
     */
    refund_delivery_price: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemRefundUpdateLog
     */
    refund_amount: number;
    /**
     * 
     * @type {number}
     * @memberof OrderItemRefundUpdateLog
     */
    order_item: number;
}
/**
 * 
 * @export
 * @interface OrderItemRetrieve
 */
export interface OrderItemRetrieve {
    /**
     * 
     * @type {number}
     * @memberof OrderItemRetrieve
     */
    id: number;
    /**
     * 
     * @type {Order}
     * @memberof OrderItemRetrieve
     */
    order: Order;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    product_option: string;
    /**
     * 
     * @type {number}
     * @memberof OrderItemRetrieve
     */
    total_amount: number;
    /**
     * 
     * @type {Array<OrderItemActionLog>}
     * @memberof OrderItemRetrieve
     */
    logs: Array<OrderItemActionLog>;
    /**
     * 
     * @type {Array<OrderItemMemo>}
     * @memberof OrderItemRetrieve
     */
    memos: Array<OrderItemMemo>;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    order_item_code: string;
    /**
     * 
     * @type {OrderItemTypeEnum}
     * @memberof OrderItemRetrieve
     */
    order_item_type: OrderItemTypeEnum;
    /**
     * 
     * @type {OrderItemStatusEnum}
     * @memberof OrderItemRetrieve
     */
    order_item_status: OrderItemStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    brand_keyname: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    brand_korname: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    product_id: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    product_url: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    product_img: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    product_name: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderItemRetrieve
     */
    cancel_description: { [key: string]: any; };
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderItemRetrieve
     */
    delivery_description: { [key: string]: any; };
    /**
     * 
     * @type {boolean}
     * @memberof OrderItemRetrieve
     */
    is_removed?: boolean;
    /**
     * 
     * @type {number}
     * @memberof OrderItemRetrieve
     */
    sales_price: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    size: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    color?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemRetrieve
     */
    quantity: number;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    tracking_url?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    tracking_number?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    ordered_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    payment_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    product_preparing_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    foreign_product_inspecting_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    delivery_preparing_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    foreign_delivery_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    delivery_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    delivery_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    confirmed_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    cancel_requested_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    cancel_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    exchange_requested_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    exchange_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    exchange_finished_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    return_requested_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    return_started_at?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemRetrieve
     */
    return_finished_at?: string | null;
}
/**
 * 
 * @export
 * @interface OrderItemStatusChangeLog
 */
export interface OrderItemStatusChangeLog {
    /**
     * 
     * @type {number}
     * @memberof OrderItemStatusChangeLog
     */
    id: number;
    /**
     * 
     * @type {OrderItemStatusEnum}
     * @memberof OrderItemStatusChangeLog
     */
    status_from: OrderItemStatusEnum;
    /**
     * 
     * @type {OrderItemStatusEnum}
     * @memberof OrderItemStatusChangeLog
     */
    status_to: OrderItemStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof OrderItemStatusChangeLog
     */
    tracking_number_from?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemStatusChangeLog
     */
    tracking_number_to?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemStatusChangeLog
     */
    tracking_url_from?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderItemStatusChangeLog
     */
    tracking_url_to?: string | null;
    /**
     * 
     * @type {number}
     * @memberof OrderItemStatusChangeLog
     */
    order_item: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum OrderItemStatusEnum {
    Created = 'ORDER_ITEM_CREATED',
    Recreated = 'ORDER_ITEM_RECREATED',
    PaymentPending = 'ORDER_ITEM_PAYMENT_PENDING',
    PaymentFinished = 'ORDER_ITEM_PAYMENT_FINISHED',
    ProductPreparing = 'ORDER_ITEM_PRODUCT_PREPARING',
    ForeignProductInspecting = 'ORDER_ITEM_FOREIGN_PRODUCT_INSPECTING',
    DeliveryPreparing = 'ORDER_ITEM_DELIVERY_PREPARING',
    ForeignDeliveryStarted = 'ORDER_ITEM_FOREIGN_DELIVERY_STARTED',
    DeliveryStarted = 'ORDER_ITEM_DELIVERY_STARTED',
    DeliveryFinished = 'ORDER_ITEM_DELIVERY_FINISHED',
    ConfirmPayment = 'ORDER_ITEM_CONFIRM_PAYMENT',
    CancelFinished = 'ORDER_ITEM_CANCEL_FINISHED',
    ExchangeRequested = 'ORDER_ITEM_EXCHANGE_REQUESTED',
    ExchangePending = 'ORDER_ITEM_EXCHANGE_PENDING',
    ExchangeFinished = 'ORDER_ITEM_EXCHANGE_FINISHED',
    ReturnRequested = 'ORDER_ITEM_RETURN_REQUESTED',
    ReturnPending = 'ORDER_ITEM_RETURN_PENDING',
    ReturnFinished = 'ORDER_ITEM_RETURN_FINISHED'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum OrderItemTypeEnum {
    NormalOrder = 'NORMAL_ORDER',
    TimedealOrder = 'TIMEDEAL_ORDER',
    ExhibitionOrder = 'EXHIBITION_ORDER',
    UnknownOrder = 'UNKNOWN_ORDER'
}

/**
 * 
 * @export
 * @interface OrderPaymentAdjustment
 */
export interface OrderPaymentAdjustment {
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    id: number;
    /**
     * 
     * @type {Admin}
     * @memberof OrderPaymentAdjustment
     */
    admin: Admin;
    /**
     * 
     * @type {MethodEnum}
     * @memberof OrderPaymentAdjustment
     */
    method: MethodEnum;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    previous_balance: number;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    amount: number;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    resulting_balance: number;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OrderPaymentAdjustment
     */
    pg_response?: { [key: string]: any; } | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    bank_account_info?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    reason?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof OrderPaymentAdjustment
     */
    updated_at: string;
    /**
     * 
     * @type {number}
     * @memberof OrderPaymentAdjustment
     */
    order: number;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum OrderStatusEnum {
    Created = 'ORDER_CREATED',
    Recreated = 'ORDER_RECREATED',
    PaymentPending = 'ORDER_PAYMENT_PENDING',
    PaymentFinished = 'ORDER_PAYMENT_FINISHED'
}

/**
 * 
 * @export
 * @interface Package
 */
export interface Package {
    /**
     * 
     * @type {number}
     * @memberof Package
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    key: string;
    /**
     * 
     * @type {PackageStatusEnum}
     * @memberof Package
     */
    status: PackageStatusEnum;
    /**
     * 
     * @type {Array<any>}
     * @memberof Package
     */
    related_order_item_ids: Array<any>;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    customer_name: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    customer_contact: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    base_address: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    detail_address: string | null;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    postal_code: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    delivery_note: string | null;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    tracking_number: string | null;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    updated_at: string;
    /**
     * 
     * @type {string}
     * @memberof Package
     */
    deleted_at: string | null;
    /**
     * 
     * @type {number}
     * @memberof Package
     */
    remark_records: number | null;
    /**
     * 
     * @type {number}
     * @memberof Package
     */
    inventories: number | null;
    /**
     * 
     * @type {number}
     * @memberof Package
     */
    tracking_courier: number | null;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum PackageStatusEnum {
    DeliveryPreparing = 'DELIVERY_PREPARING',
    DeliveryStarted = 'DELIVERY_STARTED',
    DeliveryFinished = 'DELIVERY_FINISHED',
    OverseaShipmentPreparing = 'OVERSEA_SHIPMENT_PREPARING',
    OverseaShipmentStarted = 'OVERSEA_SHIPMENT_STARTED',
    CancelRequested = 'CANCEL_REQUESTED',
    CancelPending = 'CANCEL_PENDING',
    CancelFinished = 'CANCEL_FINISHED'
}

/**
 * 
 * @export
 * @interface PaginatedOrderItemListList
 */
export interface PaginatedOrderItemListList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedOrderItemListList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOrderItemListList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedOrderItemListList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<OrderItemList>}
     * @memberof PaginatedOrderItemListList
     */
    results?: Array<OrderItemList>;
}
/**
 * 
 * @export
 * @interface PaginatedPackageList
 */
export interface PaginatedPackageList {
    /**
     * 
     * @type {number}
     * @memberof PaginatedPackageList
     */
    count?: number;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPackageList
     */
    next?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PaginatedPackageList
     */
    previous?: string | null;
    /**
     * 
     * @type {Array<Package>}
     * @memberof PaginatedPackageList
     */
    results?: Array<Package>;
}
/**
 * 
 * @export
 * @interface Payment
 */
export interface Payment {
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    id: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    imp_uid: string;
    /**
     * 
     * @type {PaymentStatusEnum}
     * @memberof Payment
     */
    payment_status: PaymentStatusEnum;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    pg: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    pay_method: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    merchant_uid: string;
    /**
     * 
     * @type {number}
     * @memberof Payment
     */
    amount: number;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyer_name: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyer_mobile: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyer_address: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    buyer_post_code: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    company: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    app_scheme: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    created_at: string;
    /**
     * 
     * @type {string}
     * @memberof Payment
     */
    updated_at: string;
}
/**
 * 
 * @export
 * @enum {string}
 */

export enum PaymentStatusEnum {
    Created = 'PAYMENT_CREATED',
    Confirmed = 'PAYMENT_CONFIRMED',
    TimeOut = 'PAYMENT_TIME_OUT',
    Canceled = 'PAYMENT_CANCELED',
    RefundRequested = 'PAYMENT_REFUND_REQUESTED',
    RefundFinished = 'PAYMENT_REFUND_FINISHED'
}

/**
 * 
 * @export
 * @interface Profile
 */
export interface Profile {
    /**
     * 
     * @type {string}
     * @memberof Profile
     */
    name: string;
}
/**
 * 
 * @export
 * @interface TokenObtainPairRequestRequest
 */
export interface TokenObtainPairRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairRequestRequest
     */
    username: string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairRequestRequest
     */
    password: string;
}
/**
 * 
 * @export
 * @interface TokenObtainPairResponse
 */
export interface TokenObtainPairResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairResponse
     */
    access: string;
    /**
     * 
     * @type {string}
     * @memberof TokenObtainPairResponse
     */
    refresh: string;
}
/**
 * 
 * @export
 * @interface TokenRefreshRequestRequest
 */
export interface TokenRefreshRequestRequest {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshRequestRequest
     */
    refresh: string;
}
/**
 * 
 * @export
 * @interface TokenRefreshResponse
 */
export interface TokenRefreshResponse {
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshResponse
     */
    access: string;
    /**
     * 
     * @type {string}
     * @memberof TokenRefreshResponse
     */
    refresh: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 테스트를 위한 메소드입니다
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoriesList: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/inventories/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 테스트를 위한 메소드입니다
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async inventoriesList(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<Inventory>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.inventoriesList(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 테스트를 위한 메소드입니다
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        inventoriesList(options?: any): AxiosPromise<Array<Inventory>> {
            return localVarFp.inventoriesList(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 테스트를 위한 메소드입니다
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public inventoriesList(options?: any) {
        return DefaultApiFp(this.configuration).inventoriesList(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * AdminUserApi - axios parameter creator
 * @export
 */
export const AdminUserApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Adaptation of DRF GenericViewSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserMeRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/admin-user/me/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AdminUserApi - functional programming interface
 * @export
 */
export const AdminUserApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = AdminUserApiAxiosParamCreator(configuration)
    return {
        /**
         * Adaptation of DRF GenericViewSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async adminUserMeRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Admin>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.adminUserMeRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * AdminUserApi - factory interface
 * @export
 */
export const AdminUserApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = AdminUserApiFp(configuration)
    return {
        /**
         * Adaptation of DRF GenericViewSet
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        adminUserMeRetrieve(options?: any): AxiosPromise<Admin> {
            return localVarFp.adminUserMeRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AdminUserApi - object-oriented interface
 * @export
 * @class AdminUserApi
 * @extends {BaseAPI}
 */
export class AdminUserApi extends BaseAPI {
    /**
     * Adaptation of DRF GenericViewSet
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AdminUserApi
     */
    public adminUserMeRetrieve(options?: any) {
        return AdminUserApiFp(this.configuration).adminUserMeRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ApiApi - axios parameter creator
 * @export
 */
export const ApiApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve: async (format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/schema/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (format !== undefined) {
                localVarQueryParameter['format'] = format;
            }

            if (lang !== undefined) {
                localVarQueryParameter['lang'] = lang;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ApiApi - functional programming interface
 * @export
 */
export const ApiApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ApiApiAxiosParamCreator(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<{ [key: string]: any; }>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiSchemaRetrieve(format, lang, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ApiApi - factory interface
 * @export
 */
export const ApiApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ApiApiFp(configuration)
    return {
        /**
         * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
         * @param {'json' | 'yaml'} [format] 
         * @param {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'} [lang] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiSchemaRetrieve(format?: 'json' | 'yaml', lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant', options?: any): AxiosPromise<{ [key: string]: any; }> {
            return localVarFp.apiSchemaRetrieve(format, lang, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for apiSchemaRetrieve operation in ApiApi.
 * @export
 * @interface ApiApiApiSchemaRetrieveRequest
 */
export interface ApiApiApiSchemaRetrieveRequest {
    /**
     * 
     * @type {'json' | 'yaml'}
     * @memberof ApiApiApiSchemaRetrieve
     */
    readonly format?: 'json' | 'yaml'

    /**
     * 
     * @type {'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'}
     * @memberof ApiApiApiSchemaRetrieve
     */
    readonly lang?: 'af' | 'ar' | 'ar-dz' | 'ast' | 'az' | 'be' | 'bg' | 'bn' | 'br' | 'bs' | 'ca' | 'cs' | 'cy' | 'da' | 'de' | 'dsb' | 'el' | 'en' | 'en-au' | 'en-gb' | 'eo' | 'es' | 'es-ar' | 'es-co' | 'es-mx' | 'es-ni' | 'es-ve' | 'et' | 'eu' | 'fa' | 'fi' | 'fr' | 'fy' | 'ga' | 'gd' | 'gl' | 'he' | 'hi' | 'hr' | 'hsb' | 'hu' | 'hy' | 'ia' | 'id' | 'ig' | 'io' | 'is' | 'it' | 'ja' | 'ka' | 'kab' | 'kk' | 'km' | 'kn' | 'ko' | 'ky' | 'lb' | 'lt' | 'lv' | 'mk' | 'ml' | 'mn' | 'mr' | 'my' | 'nb' | 'ne' | 'nl' | 'nn' | 'os' | 'pa' | 'pl' | 'pt' | 'pt-br' | 'ro' | 'ru' | 'sk' | 'sl' | 'sq' | 'sr' | 'sr-latn' | 'sv' | 'sw' | 'ta' | 'te' | 'tg' | 'th' | 'tk' | 'tr' | 'tt' | 'udm' | 'uk' | 'ur' | 'uz' | 'vi' | 'zh-hans' | 'zh-hant'
}

/**
 * ApiApi - object-oriented interface
 * @export
 * @class ApiApi
 * @extends {BaseAPI}
 */
export class ApiApi extends BaseAPI {
    /**
     * OpenApi3 schema for this API. Format can be selected via content negotiation.  - YAML: application/vnd.oai.openapi - JSON: application/vnd.oai.openapi+json
     * @param {ApiApiApiSchemaRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ApiApi
     */
    public apiSchemaRetrieve(requestParameters: ApiApiApiSchemaRetrieveRequest = {}, options?: any) {
        return ApiApiFp(this.configuration).apiSchemaRetrieve(requestParameters.format, requestParameters.lang, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * CouriersApi - axios parameter creator
 * @export
 */
export const CouriersApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        couriersRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/couriers/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CouriersApi - functional programming interface
 * @export
 */
export const CouriersApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = CouriersApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async couriersRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.couriersRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * CouriersApi - factory interface
 * @export
 */
export const CouriersApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = CouriersApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        couriersRetrieve(options?: any): AxiosPromise<void> {
            return localVarFp.couriersRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CouriersApi - object-oriented interface
 * @export
 * @class CouriersApi
 * @extends {BaseAPI}
 */
export class CouriersApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CouriersApi
     */
    public couriersRetrieve(options?: any) {
        return CouriersApiFp(this.configuration).couriersRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * OrderItemsApi - axios parameter creator
 * @export
 */
export const OrderItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatusRequest} changeStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderItemsChangeStatusCreate: async (id: string, changeStatusRequest: ChangeStatusRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderItemsChangeStatusCreate', 'id', id)
            // verify required parameter 'changeStatusRequest' is not null or undefined
            assertParamExists('orderItemsChangeStatusCreate', 'changeStatusRequest', changeStatusRequest)
            const localVarPath = `/order-items/{id}/change_status/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(changeStatusRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} [createdGte] 
         * @param {string} [createdLte] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [size] Number of results to return per page.
         * @param {Array<string>} [statuses] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderItemsList: async (createdGte?: string, createdLte?: string, page?: number, size?: number, statuses?: Array<string>, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/order-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (createdGte !== undefined) {
                localVarQueryParameter['created__gte'] = (createdGte as any instanceof Date) ?
                    (createdGte as any).toISOString().substr(0,10) :
                    createdGte;
            }

            if (createdLte !== undefined) {
                localVarQueryParameter['created__lte'] = (createdLte as any instanceof Date) ?
                    (createdLte as any).toISOString().substr(0,10) :
                    createdLte;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (statuses) {
                localVarQueryParameter['statuses'] = statuses.join(COLLECTION_FORMATS.csv);
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderItemsRetrieve: async (id: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('orderItemsRetrieve', 'id', id)
            const localVarPath = `/order-items/{id}/`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * OrderItemsApi - functional programming interface
 * @export
 */
export const OrderItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = OrderItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatusRequest} changeStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderItemsChangeStatusCreate(id: string, changeStatusRequest: ChangeStatusRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ChangeStatus>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderItemsChangeStatusCreate(id, changeStatusRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} [createdGte] 
         * @param {string} [createdLte] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [size] Number of results to return per page.
         * @param {Array<string>} [statuses] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderItemsList(createdGte?: string, createdLte?: string, page?: number, size?: number, statuses?: Array<string>, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedOrderItemListList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderItemsList(createdGte, createdLte, page, size, statuses, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async orderItemsRetrieve(id: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<OrderItemRetrieve>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.orderItemsRetrieve(id, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * OrderItemsApi - factory interface
 * @export
 */
export const OrderItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = OrderItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {string} id 
         * @param {ChangeStatusRequest} changeStatusRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderItemsChangeStatusCreate(id: string, changeStatusRequest: ChangeStatusRequest, options?: any): AxiosPromise<ChangeStatus> {
            return localVarFp.orderItemsChangeStatusCreate(id, changeStatusRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} [createdGte] 
         * @param {string} [createdLte] 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [size] Number of results to return per page.
         * @param {Array<string>} [statuses] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderItemsList(createdGte?: string, createdLte?: string, page?: number, size?: number, statuses?: Array<string>, options?: any): AxiosPromise<PaginatedOrderItemListList> {
            return localVarFp.orderItemsList(createdGte, createdLte, page, size, statuses, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {string} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        orderItemsRetrieve(id: string, options?: any): AxiosPromise<OrderItemRetrieve> {
            return localVarFp.orderItemsRetrieve(id, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for orderItemsChangeStatusCreate operation in OrderItemsApi.
 * @export
 * @interface OrderItemsApiOrderItemsChangeStatusCreateRequest
 */
export interface OrderItemsApiOrderItemsChangeStatusCreateRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderItemsApiOrderItemsChangeStatusCreate
     */
    readonly id: string

    /**
     * 
     * @type {ChangeStatusRequest}
     * @memberof OrderItemsApiOrderItemsChangeStatusCreate
     */
    readonly changeStatusRequest: ChangeStatusRequest
}

/**
 * Request parameters for orderItemsList operation in OrderItemsApi.
 * @export
 * @interface OrderItemsApiOrderItemsListRequest
 */
export interface OrderItemsApiOrderItemsListRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderItemsApiOrderItemsList
     */
    readonly createdGte?: string

    /**
     * 
     * @type {string}
     * @memberof OrderItemsApiOrderItemsList
     */
    readonly createdLte?: string

    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof OrderItemsApiOrderItemsList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof OrderItemsApiOrderItemsList
     */
    readonly size?: number

    /**
     * 
     * @type {Array<string>}
     * @memberof OrderItemsApiOrderItemsList
     */
    readonly statuses?: Array<string>
}

/**
 * Request parameters for orderItemsRetrieve operation in OrderItemsApi.
 * @export
 * @interface OrderItemsApiOrderItemsRetrieveRequest
 */
export interface OrderItemsApiOrderItemsRetrieveRequest {
    /**
     * 
     * @type {string}
     * @memberof OrderItemsApiOrderItemsRetrieve
     */
    readonly id: string
}

/**
 * OrderItemsApi - object-oriented interface
 * @export
 * @class OrderItemsApi
 * @extends {BaseAPI}
 */
export class OrderItemsApi extends BaseAPI {
    /**
     * 
     * @param {OrderItemsApiOrderItemsChangeStatusCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemsApi
     */
    public orderItemsChangeStatusCreate(requestParameters: OrderItemsApiOrderItemsChangeStatusCreateRequest, options?: any) {
        return OrderItemsApiFp(this.configuration).orderItemsChangeStatusCreate(requestParameters.id, requestParameters.changeStatusRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderItemsApiOrderItemsListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemsApi
     */
    public orderItemsList(requestParameters: OrderItemsApiOrderItemsListRequest = {}, options?: any) {
        return OrderItemsApiFp(this.configuration).orderItemsList(requestParameters.createdGte, requestParameters.createdLte, requestParameters.page, requestParameters.size, requestParameters.statuses, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {OrderItemsApiOrderItemsRetrieveRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof OrderItemsApi
     */
    public orderItemsRetrieve(requestParameters: OrderItemsApiOrderItemsRetrieveRequest, options?: any) {
        return OrderItemsApiFp(this.configuration).orderItemsRetrieve(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * PackagesApi - axios parameter creator
 * @export
 */
export const PackagesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packagesList: async (page?: number, size?: number, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/packages/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PackagesApi - functional programming interface
 * @export
 */
export const PackagesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = PackagesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async packagesList(page?: number, size?: number, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<PaginatedPackageList>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.packagesList(page, size, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * PackagesApi - factory interface
 * @export
 */
export const PackagesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = PackagesApiFp(configuration)
    return {
        /**
         * 
         * @param {number} [page] A page number within the paginated result set.
         * @param {number} [size] Number of results to return per page.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        packagesList(page?: number, size?: number, options?: any): AxiosPromise<PaginatedPackageList> {
            return localVarFp.packagesList(page, size, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for packagesList operation in PackagesApi.
 * @export
 * @interface PackagesApiPackagesListRequest
 */
export interface PackagesApiPackagesListRequest {
    /**
     * A page number within the paginated result set.
     * @type {number}
     * @memberof PackagesApiPackagesList
     */
    readonly page?: number

    /**
     * Number of results to return per page.
     * @type {number}
     * @memberof PackagesApiPackagesList
     */
    readonly size?: number
}

/**
 * PackagesApi - object-oriented interface
 * @export
 * @class PackagesApi
 * @extends {BaseAPI}
 */
export class PackagesApi extends BaseAPI {
    /**
     * 
     * @param {PackagesApiPackagesListRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PackagesApi
     */
    public packagesList(requestParameters: PackagesApiPackagesListRequest = {}, options?: any) {
        return PackagesApiFp(this.configuration).packagesList(requestParameters.page, requestParameters.size, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ReceivedItemsApi - axios parameter creator
 * @export
 */
export const ReceivedItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivedItemsRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/received-items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ReceivedItemsApi - functional programming interface
 * @export
 */
export const ReceivedItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ReceivedItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async receivedItemsRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.receivedItemsRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ReceivedItemsApi - factory interface
 * @export
 */
export const ReceivedItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ReceivedItemsApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        receivedItemsRetrieve(options?: any): AxiosPromise<void> {
            return localVarFp.receivedItemsRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ReceivedItemsApi - object-oriented interface
 * @export
 * @class ReceivedItemsApi
 * @extends {BaseAPI}
 */
export class ReceivedItemsApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ReceivedItemsApi
     */
    public receivedItemsRetrieve(options?: any) {
        return ReceivedItemsApiFp(this.configuration).receivedItemsRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * ShippingNoticesApi - axios parameter creator
 * @export
 */
export const ShippingNoticesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shippingNoticesRetrieve: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/shipping-notices/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication jwtAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ShippingNoticesApi - functional programming interface
 * @export
 */
export const ShippingNoticesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ShippingNoticesApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async shippingNoticesRetrieve(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.shippingNoticesRetrieve(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * ShippingNoticesApi - factory interface
 * @export
 */
export const ShippingNoticesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ShippingNoticesApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        shippingNoticesRetrieve(options?: any): AxiosPromise<void> {
            return localVarFp.shippingNoticesRetrieve(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ShippingNoticesApi - object-oriented interface
 * @export
 * @class ShippingNoticesApi
 * @extends {BaseAPI}
 */
export class ShippingNoticesApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ShippingNoticesApi
     */
    public shippingNoticesRetrieve(options?: any) {
        return ShippingNoticesApiFp(this.configuration).shippingNoticesRetrieve(options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * TokenApi - axios parameter creator
 * @export
 */
export const TokenApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequestRequest} tokenObtainPairRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenCreate: async (tokenObtainPairRequestRequest: TokenObtainPairRequestRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenObtainPairRequestRequest' is not null or undefined
            assertParamExists('tokenCreate', 'tokenObtainPairRequestRequest', tokenObtainPairRequestRequest)
            const localVarPath = `/token/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenObtainPairRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequestRequest} tokenRefreshRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenRefreshCreate: async (tokenRefreshRequestRequest: TokenRefreshRequestRequest, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenRefreshRequestRequest' is not null or undefined
            assertParamExists('tokenRefreshCreate', 'tokenRefreshRequestRequest', tokenRefreshRequestRequest)
            const localVarPath = `/token/refresh/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(tokenRefreshRequestRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * TokenApi - functional programming interface
 * @export
 */
export const TokenApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = TokenApiAxiosParamCreator(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequestRequest} tokenObtainPairRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenCreate(tokenObtainPairRequestRequest: TokenObtainPairRequestRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenObtainPairResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenCreate(tokenObtainPairRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequestRequest} tokenRefreshRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async tokenRefreshCreate(tokenRefreshRequestRequest: TokenRefreshRequestRequest, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TokenRefreshResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.tokenRefreshCreate(tokenRefreshRequestRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * TokenApi - factory interface
 * @export
 */
export const TokenApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = TokenApiFp(configuration)
    return {
        /**
         * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
         * @param {TokenObtainPairRequestRequest} tokenObtainPairRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenCreate(tokenObtainPairRequestRequest: TokenObtainPairRequestRequest, options?: any): AxiosPromise<TokenObtainPairResponse> {
            return localVarFp.tokenCreate(tokenObtainPairRequestRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
         * @param {TokenRefreshRequestRequest} tokenRefreshRequestRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        tokenRefreshCreate(tokenRefreshRequestRequest: TokenRefreshRequestRequest, options?: any): AxiosPromise<TokenRefreshResponse> {
            return localVarFp.tokenRefreshCreate(tokenRefreshRequestRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for tokenCreate operation in TokenApi.
 * @export
 * @interface TokenApiTokenCreateRequest
 */
export interface TokenApiTokenCreateRequest {
    /**
     * 
     * @type {TokenObtainPairRequestRequest}
     * @memberof TokenApiTokenCreate
     */
    readonly tokenObtainPairRequestRequest: TokenObtainPairRequestRequest
}

/**
 * Request parameters for tokenRefreshCreate operation in TokenApi.
 * @export
 * @interface TokenApiTokenRefreshCreateRequest
 */
export interface TokenApiTokenRefreshCreateRequest {
    /**
     * 
     * @type {TokenRefreshRequestRequest}
     * @memberof TokenApiTokenRefreshCreate
     */
    readonly tokenRefreshRequestRequest: TokenRefreshRequestRequest
}

/**
 * TokenApi - object-oriented interface
 * @export
 * @class TokenApi
 * @extends {BaseAPI}
 */
export class TokenApi extends BaseAPI {
    /**
     * Takes a set of user credentials and returns an access and refresh JSON web token pair to prove the authentication of those credentials.
     * @param {TokenApiTokenCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public tokenCreate(requestParameters: TokenApiTokenCreateRequest, options?: any) {
        return TokenApiFp(this.configuration).tokenCreate(requestParameters.tokenObtainPairRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * Takes a refresh type JSON web token and returns an access type JSON web token if the refresh token is valid.
     * @param {TokenApiTokenRefreshCreateRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof TokenApi
     */
    public tokenRefreshCreate(requestParameters: TokenApiTokenRefreshCreateRequest, options?: any) {
        return TokenApiFp(this.configuration).tokenRefreshCreate(requestParameters.tokenRefreshRequestRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


